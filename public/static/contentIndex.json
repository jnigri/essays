{"How-to-code-review":{"slug":"How-to-code-review","filePath":"How to code review?.md","title":"How to code review?","links":[],"tags":[],"content":"In most cases, do not make code review mandatory.\nWhen people can deploy, they own it.\nWhen people own it, they care for it.\nYou should comment.\nReviewing is a chance to learn together.\nDon‚Äôt command, suggest and explain why.\nDo not comment on formatting, automate it.\nMake a big effort to post all comments at once.\nIn most cases, you should approve.\nDoes this change make the system better? Then approve it.\nDoes this change add a feature?  Then approve it.\nDoes this change fix a bug? Then approve it.\nDo not slow down productivity for an opinion.\nThe ultimate code review catches something that would break.\nBe a hero, find a real bug."},"How-to-debug-anything":{"slug":"How-to-debug-anything","filePath":"How to debug anything?.md","title":"How to debug anything?","links":[],"tags":[],"content":"Be great at debugging.\nRead the error messages.\nStart from the last message.\nHidden in the noise, you may find the solution.\nStay calm.\nBinary search the code.\nRemove half the code.\nDoes the problem still exist?\nBinary search the environment.\nRemove half the environment.\nDoes the problem still exist?\nBinary search the version history.\nGo back 6 months ago.\nDoes the problem still exist?\nBinary search everything.\nAsk for help.\nExplore the options you have first.\nYour colleagues‚Äô time is valuable.\nSo is yours.\nSleep on it.\nSometimes you can‚Äôt reproduce it.\nIf you can‚Äôt reproduce it, you can‚Äôt fix it.\nAdd logs and wait for it to appear again."},"How-to-learn-a-new-language":{"slug":"How-to-learn-a-new-language","filePath":"How to learn a new language?.md","title":"How to learn a new language","links":[],"tags":[],"content":"If you are new at programming, pick a language and build small things first.\nRead the language specification from cover to cover.\nThen read the standard library from cover to cover.\nDon‚Äôt stop for too long if you don‚Äôt understand something.\nYes it‚Äôs going to be hard and tenuous.\nYes it won‚Äôt make you an expert immediately.\nThis is a first step where your brain will index what‚Äôs most likely the source of truth for this language.\nThen start to build things, and refer to that documentation when you have doubts.\nThis is how you will become an expert."},"How-to-test-code":{"slug":"How-to-test-code","filePath":"How to test code?.md","title":"How to test code?","links":[],"tags":[],"content":"Remember that you have to maintain tests.\nKeep code simple. Keep tests simpler.\nAvoid abstractions in code. Ban them in tests.\nDo not seek high coverage.\nThink about return on investment (ROI).\nTest the logic, not the configurations.\nTest the thinking, not the plumbing.\nTest what decides, not what connects.\nDo not modify your code because of your tests.\nTest depending on the number of dependencies.\nCore code needs more tests.\nLeaf code needs fewer.\nNever ship untested code.\nTest automation is optional. Testing isn‚Äôt.\nTake a step back.\nImagine you open the application.\nYou click here and there.\nMake sure that this and that work.\nAutomate this test.\nThis test has great value.\nRun it every day or every hour.\nMaintain it.\nMake sure you are alerted if it fails."},"How-to-write-a-git-commit-message":{"slug":"How-to-write-a-git-commit-message","filePath":"How to write a git commit message?.md","title":"How to write a git commit message?","links":[],"tags":[],"content":"Limit the subject line to 50 chars.\nWrite like you‚Äôre giving orders.\nStart with a verb.\nOne line often suffices.\nLimit the body lines to 72 chars.\nExplain how you tested the change.\nYou haven‚Äôt tested the change? Go do that first.\nA template I like:\nAdd new feature\n\nNOTES\n-----\n\n- This feature does X\n- We did it because Y\n- Also, it&#039;s related to Z\n\nTESTS\n-----\n\n- I tested locally\n- I went to the tool and clicked here and here\nand then was able to see this and that\n\n"},"index":{"slug":"index","filePath":"index.md","title":"Julien Nigri","links":[],"tags":[],"content":"üë®‚Äçüíª I write software\nYou probably used code that I wrote."}}