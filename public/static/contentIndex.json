{"How-to-code-review":{"slug":"How-to-code-review","filePath":"How to code review?.md","title":"How to code review?","links":[],"tags":[],"content":"Consider not making code reviews mandatory.\nWhen people can deploy, they own it.\nWhen people own it, they care for it.\nYou should comment.\nReviewing is a chance to learn together.\nSuggest, don‚Äôt command.\nExplain your reasoning.\nGive examples.\nSuggest a code change.\nDon‚Äôt comment on formatting.\nAutomate it.\nBatch your feedback.\nPost all comments at once.\nContext switching kills flow.\nHas the change been tested (even manually)?\nApprove.\nDoes it improve the system?\nApprove.\nDoes it add value?\nApprove.\nDoes it fix something broken?\nApprove.\nDon‚Äôt block progress for style opinions.\nPerfectionism slows everyone down.\nTrust your team.\nPick your battles.\nReviews aren‚Äôt about control.\nThey are about catching disasters.\nThey are about learning from each other.\nThe best reviews catch real bugs.\nThings that would actually break.\nBe a hero, find a real bug."},"How-to-debug-anything":{"slug":"How-to-debug-anything","filePath":"How to debug anything?.md","title":"How to debug anything?","links":[],"tags":[],"content":"Be great at debugging.\nRead the error messages.\nStart from the last message.\nHidden in the noise, you may find the solution.\nStay calm.\nBinary search the code.\nRemove half the code.\nDoes the problem still exist?\nBinary search the environment.\nRemove half the environment.\nDoes the problem still exist?\nBinary search the version history.\nGo back 6 months ago.\nDoes the problem still exist?\nBinary search everything.\nAsk for help.\nExplore the options you have first.\nYour colleagues‚Äô time is valuable.\nSo is yours.\nSleep on it.\nSometimes you can‚Äôt reproduce it.\nIf you can‚Äôt reproduce it, you can‚Äôt fix it.\nAdd logs and wait for it to appear again."},"How-to-estimate":{"slug":"How-to-estimate","filePath":"How to estimate?.md","title":"How to estimate?","links":[],"tags":[],"content":"Perfect estimates don‚Äôt exist.\nThey are guesses.\nDon‚Äôt spend too much time on estimates.\n‚ÄúMan makes plans, God laughs.‚Äù\nBut estimates still matter.\nThey tell you how much a project costs.\nThey guide strategic choices.\nThey prevent disasters.\n‚ÄúA plan is nothing, planning is everything.‚Äù\nBad estimates destroy trust.\nUnderestimate and you miss deadlines.\nTeams panic.\nMeetings multiply.\nMore people get added.\nNew people need time to learn.\nEverything slows down.\nOverestimate and work expands.\nStudent syndrome: People wait until the last moment.\nThen rush.\nSoftware estimation is particularly complicated.\nWe don‚Äôt repeat, we automate once, computers repeat.\nEvery project is something new.\nOnly in repetitive work estimates can be accurate.\nStop trying to be precise!\nEmbrace the uncertainty.\nGet good at best-case, worst-case thinking.\nExample: Implement a service.\nBest case: Two hours if everything clicks.\nWorst case: Three days if complexity explodes.\nPractice these ranges.\nCalibrate your confidence.\nDon‚Äôt aim for 100% accuracy.\nThat‚Äôs easy: every task takes zero to infinity.\nAim for 90% accuracy.\nTake risks to improve.\nProjects have multiple tasks.\nDon‚Äôt just add the ranges.\nYou have ten tasks of 1 to 6 days each?\nDon‚Äôt take the minimum (10), don‚Äôt take the maximum (60).\nThink like rolling dice.\nUse normal distribution math.\nAggregate the uncertainty properly.\nTake the 90th percentile of your final range.\nThis gives you 90% confidence.\nNine times out of ten, you‚Äôll finish on time.\nThe math is complex.\nI‚Äôve created a tool to make it simpler:\nestimatador.com"},"How-to-learn-a-new-language":{"slug":"How-to-learn-a-new-language","filePath":"How to learn a new language?.md","title":"How to learn a new language?","links":[],"tags":[],"content":"Caveat\nThis below doesn‚Äôt apply if you are new at programming.\nIf you are, pick a language and build small things first.\nRead the language specification from cover to cover.\nThen read the standard library from cover to cover.\nDon‚Äôt stop for too long if you don‚Äôt understand something.\nYes it‚Äôs going to be hard and tedious.\nYes it won‚Äôt make you an expert immediately.\nThis is a first step.\nYour brain will index these documents.\nYou will then know where to look.\nIt‚Äôs a good bet to assume that these documents are the best source of truth.\nThen start building things."},"How-to-test-code":{"slug":"How-to-test-code","filePath":"How to test code?.md","title":"How to test code?","links":[],"tags":[],"content":"Remember that you have to maintain tests.\nKeep code simple. Keep tests simpler.\nAvoid abstractions in code. Ban them in tests.\nDo not seek high coverage.\nThink about return on investment (ROI).\nTest the logic, not the configurations.\nTest the thinking, not the plumbing.\nTest what decides, not what connects.\nDo not modify your code because of your tests.\nTest depending on the number of dependencies.\nCore code needs more tests.\nLeaf code needs fewer.\nNever ship untested code.\nTest automation is optional. Testing isn‚Äôt.\nTake a step back.\nImagine you open the application.\nYou click here and there.\nMake sure that this and that work.\nAutomate this test.\nThis test has great value.\nRun it every day or every hour.\nMaintain it.\nMake sure you are alerted if it fails."},"How-to-write-a-git-commit-message":{"slug":"How-to-write-a-git-commit-message","filePath":"How to write a git commit message?.md","title":"How to write a git commit message?","links":[],"tags":[],"content":"Limit the subject line to 50 chars.\nWrite like you‚Äôre giving orders.\nStart with a verb.\nOne line often suffices.\nLimit the body lines to 72 chars.\nExplain how you tested the change.\nYou haven‚Äôt tested the change? Go do that first.\nA template I like:\nAdd new feature\n\nNOTES\n-----\n\n- This feature does X\n- We did it because Y\n- Also, it&#039;s related to Z\n\nTESTS\n-----\n\n- I tested locally\n- I went to the tool and clicked here and here\nand then was able to see this and that\n\n"},"index":{"slug":"index","filePath":"index.md","title":"Julien Nigri","links":[],"tags":[],"content":"üë®‚Äçüíª I write software\nYou probably used code that I wrote."}}